<pre class='metadata'>
Title: Your Spec Title
Shortname: DID-Linked Resources
Level: 1
Status: w3c/CG-DRAFT
Group: w3c-ccg
URL: https://w3c-ccg.github.io/did-linked-resources/
Editor: Alex Tweeddale, https://github.com/Tweeddalex
Abstract: This specification intends to create a standardized way of referencing, dereferencing and fetching digital resources. This includes associating digital resources with Decentralized Identifiers (DIDs) and organizing in DID-Linked Collections, where each individual resource is identifiable through its own DID URL.
</pre>

1. Introduction {#intro}
=====================

DID-Linked Resources are digital files that may can be retrieved and referenced using a persistent and unique DID URL. 

This specification defines common requirements, algorithms including their request formats and response formats, architectural options, and various considerations for how DID-Linked Resources SHOULD act as persistent identifiers for referencing and retrieving digital Resources (such as data schemas, interface definitions, governance documents, or policy definitions). This specification will also complement the [DID Resolution Specification](https://w3c-ccg.github.io/did-resolution/), including its patterns and algorithms for DID URL resolution and dereferencing. Through using DID URLs which remain conformant with [W3C Decentralized Identifiers (DIDs) v1.0 Recommendation](https://www.w3.org/TR/did-core/) and [DID Resolution Specififation](https://w3c-ccg.github.io/did-resolution/), existing DID Resolvers will be able to dereference these DID URLs to retrieve the identified resources using the DID URL query syntax in this specification.

> Note that while this specification defines some base-level functionality for DID URL dereferencing, the actual steps required to communicate with a DID's verifiable data registry are defined by the applicable DID method specification.

1.1 Conformance {#conformance}
=====================

As well as sections marked as non-normative, all authoring guidelines, diagrams, examples, and notes in this specification are non-normative. Everything else in this specification is normative.
The key words MAY, MUST, MUST NOT, OPTIONAL, and SHOULD in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.

2. Terminology {#terminology}
=====================

<dfn>DID controller</dfn>: As defined in [DID-CORE](https://www.w3.org/TR/did-core/).

<dfn>DID document</dfn>: As defined in [DID-CORE](https://www.w3.org/TR/did-core/).

<dfn>DID URL</dfn>: As defined in [DID-CORE](https://www.w3.org/TR/did-core/).

<dfn>DID URL Dereferencing</dfn>: As defined in [DID-CORE](https://www.w3.org/TR/did-core/).

<dfn>DID-Linked Resource</dfn>:

<dfn>Resource Collection</dfn>:

<dfn>Resource ID</dfn>: 

3. DID-Linked Resources {#resources}
=====================

3.1 DID-Linked Resources context {#context}
=====================

The [DID Core specification](https://www.w3.org/TR/did-core/) defines an interoperable standard for DID Documents and associated core properties, however it currently does not have a standardised way to specify properties of Resources associated with DIDs and how to consistely reference or retrieve them.

Digital Resources are _generally_ stored on traditional centralised-storage endpoints, but this comes with certain drawbacks:

1. **Digital Resources could be tampered by compromising the hosting provider**: Digital Resources stored at a centralised web endpoint can be compromised and replaced by malicious actors.
2. **Hosting providers could unilaterally cease to host particular clients**: Hosting providers could terminate accounts due to factors such as non-payment of fees, violation of Terms of Service, etc.
3. **Single point-of-failure in resiliency**: Even for highly-trusted and sophisticated hosting providers who may not present a risk of infrastructure being compromised, a service outage at the hosting provider can make a Resource anchored on their systems inaccessible.

Despite these issues, many self-sovereign identity (SSI) implementations - _even ones that use ledgers / distributed systems for DIDs_ - often utilise centralised storage. From the [W3C Verifiable Credential Implementation Guide](https://w3c.github.io/vc-imp-guide/#creating-new-credential-types):

> Example schema.org address with full URLs
>
> ```bash
> {
>   "@type": "http://schema.org/Person",
>   "http://schema.org/address": {
>     "@type": "http://schema.org/PostalAddress",
>     "http://schema.org/streetAddress": "123 Main St.",
>     "http://schema.org/addressLocality": "Blacksburg",
>     "http://schema.org/addressRegion": "VA",
>     "http://schema.org/postalCode": "24060",
>     "http://schema.org/addressCountry": "US"
>   }
> }
> ```

Using traditional web endpoints to store resources (such as schemas) that are critical for a Verifiable Credential to function undermines the benefits that persistently-accessible Decentralized Identifiers offer. This has also resulted in inconsistent and unstandardised approaches to storing, referencing and retrieving digital resources such as schemas, trusted issuer lists and status lists.

3.2 DID-Linked Resources construction {#contruction}
=====================

"Resources" SHOULD be identified using a Decentralized Identifier (DID) and a Universally Unique Identifier (UUID) that acts as a permanently-accessible identifier to fetch the resources from a Verifiable Data Registry or other storage endpoint. We refer to this UUID as the "resource ID".

Using UUIDs ensures a high level of confidence that no two identical resource IDs will ever be created. This is important for ensuring the integrity and identifiabilty of each individual DID-Linked Resource.

`did:example:<unique-identifier>/resources/<universally-unique-identifier>`

> Note that the above path based syntax would be an implementation specific way of referencing a resource

3.3 DID-Linked Resource Collections {#collections}
=====================

Resources are organised into groups called "Collections". Each DID may have an associated Collection, and the Collection ID is derived from the unique identifier of the DID.

Collections can store any type of Resource.

The most important concept used in this design is that each on-ledger Collection is identified using a DID and is described using a DID Document.

The DID Document acts as metadata, providing information about the Collection, such as who is able to update it, when it was created and what are the latest and deprecated versions of Resources within the Collection.
For example, the following DID:

`did:example:1f8e08a2-eeb6-40c3-9e01-33e4a0d1479d`

will derive the Collection ID: `1f8e08a2-eeb6-40c3-9e01-33e4a0d1479d`

> Note that the Collection ID may take the syntactical form of the DID method that the DID-Linked Resource is associated with.

3.4 Architecture Overview {#contruction}
=====================

<img src="DID-Linked-Resources-Relationship" alt="DID-Linked Resources Architecture Overview">

4. Design principles {#princinples}
=====================

The following design principles should be taken into consideration. DID-Linked Resources SHOULD:

1. Use existing, familiar DID Core Spec patterns where possible
2. Support existing DID Resolvers and principles of DID URL dereferencing
3. Protect against linkrot for long-term retrieval
4. Enable resources to be versioned and organised, with individual
versions being able to be fetched
5. Include semantic linkage between DID Documents and associated resources (via
metadata or otherwise)

6. DID-Linked Resources Algorithm {#algorithm}
=====================

To create a "DID-Linked Resource", you must already have created a 'parent' DID, from which the Collection ID can be derived. When you carry out the createResource transaction, you must:

1. Generate a new, unique UUID for the Resources
2. Specify the same Collection ID as the unique identifier of the parent DID
3. Sign the createResource transaction with the Verification Method keys of the parent DID.

6. Linking DIDs to Resources and Collections {#linkage}
=====================

Multiple, DID-Linked Resources can be stored in a Collection, for example, this could be different versions of the same Resource over a period of time or semantically-linked resources. This enables unique resources to be stored directly on-ledger and be retrievable through DID resolution and dereferencing.

Once you have created a resource, the DID Document will automatically reference the resource and the collection within the didDocumentMetadata in a newly defined section called linkedResourceMetadata.

This relationship is shown in the diagram below:

<img src="DID-Linked-Resources-Relationship" alt="Relationship between DIDs and DID-Linked Resources">

5. Resource Request Parameters {#request}
=====================

| Parameter                 | Type                                                          | Required?    |
| ------------------------- | ------------------------------------------------------------- | ----------- | 
| `"resourceCollectionId"`  | A [String](https://infra.spec.whatwg.org/#string) that conforms to a unique identifier format for an associated DID method             | Yes    |
| `"resourceId"`            | A [String](https://infra.spec.whatwg.org/#string) that uniquely identifies the resource, for example, using UUIDs              | Yes    |
| `"resourceName"`          | A [String](https://infra.spec.whatwg.org/#string) names and identifies a resource. This property, along with the resourceType below, can be used to track version changes within a resource              | Yes    |
| `"resourceType"`          | A [String](https://infra.spec.whatwg.org/#string) that uniquely identifies the resource, for example, using UUIDs              | Yes    |
| `"resourceVersion"`       | A [String](https://infra.spec.whatwg.org/#string) identifies the type of resource. This property, along with the resourceName above, can be used to track version changes within a resource               | No    |
| `"alsoKnownAs"`           | An [array](https://infra.spec.whatwg.org/#array) that describes alternative URIs for the  resource                    | No    |

6. Resource Response Parameters {#response}
=====================

The following list defines which specific parameters a resource response format may contain:

| Parameter | Description |
| :--- | :--- |
| **`resourceUri`** | A string or a map that conforms to the rules of [RFC3986 URIs](https://www.w3.org/TR/did-core/#dfn-uri) which SHOULD directly lead to a location where the resource can be accessed from. For example: `dic:cheqd:mainnet:46e2af9a-2ea0-4815-999d-730a6778227c/resources/0f964a80-5d18-4867-83e3-b47f5a756f02`   |
| **`resourceCollectionId`** | A string that conforms to a cheqd-supported unique identifier format. For example a UUID: `46e2af9a-2ea0-4815-999d-730a6778227c`  |
| **`resourceId`** | A string that uniquely identifies the resource, cheqd uses UUIDs. For example a UUID: `0f964a80-5d18-4867-83e3-b47f5a756f02` |
| **`resourceName`** | A string that uniquelt names and identifies a resource. This property, along with the resourceType below, can be used to track version changes within a resource. |
| **`resourceType`** | A string that identifies the type of resource. This property, along with the resourceName above, can be used to track version changes within a resource. Not to be confused with media type. |
| **`resourceVersion`** | (Optional) A string that identifies the version of resource. This property is provided by the client and can be any value |
| **`alsoKnownAs`** | (Optional) An array that describes alternative URIs for the  resource. |
| **`mediaType`** | A string that identifies the IANA-media type of the resource. |
| **`created`** | A string that identifies the time the resource was created in XML date-time. |
| **`updated`** | (Optional) A string that identifies the time the resource was updated in XML date-time. |
| **`checksum`** | A string that may be used to prove that the resource has not been tampered. |
| **`previousVersionId`** | (Optional) A string that identifies the previous version of the resource. |
| **`nextVersionId`** | (Optional) A string that identifies the next version of the resource. |


6.1 Discoverability via DIDDoc Metadata {#discoverability}
=====================

Once a Resource has been created under a Resource Collection, the parent DIDDoc will automatically have an updated _didDocumentMetadata_ section, including _linkedResourceMetadata_.

The syntax of the linked Resource metadata is as follows:

```json
"didDocumentMetadata": {
    "created": "2020-12-20T19:17:47Z",
    "updated": "",
    "deactivated": false,
    "versionId": "bdab59b0-66f5-42d3-b809-1829bdcc0408",
    "previousVersion": "",
    "nextVersion": "",
    "linkedResourceMetadata": [
      { // First version of a Resource called PassportSchema
        "resourceURI": "did:example:13d5ad44-9e99-428f-81e9-274458cefddc/resources/44547089-170b-4f5a-bcbc-06e46e0089e4",
        "resourceCollectionId": "13d5ad44-9e99-428f-81e9-274458cefddc", // Common collection ID
        "resourceId": "44547089-170b-4f5a-bcbc-06e46e0089e4", // Old Resource ID and version number
        "resourceName": "PassportSchema", // Resource name must remain the same
        "resourceType": "CL-Schema", // Resource type must remain the same
        "resourceVersion": "1.0.1", // A user-set version
        "mediaType": "application/json",
        "created": "2022-07-19T08:40:00Z",
        "checksum": "7b2022636f6e74656e74223a202274657374206461746122207d0ae3b0c44298", // Old version checksum
        "previousVersionId": "", // empty string, since no previous version
        "nextVersionId": "bb2118f3-5e55-4510-b420-33ef9e1726d2", // Points to next version below
        },
      { // Second version of a Resource called PassportSchema
        "resourceURI": "did:example:13d5ad44-9e99-428f-81e9-274458cefddc/resources/bb2118f3-5e55-4510-b420-33ef9e1726d2",
        "resourceCollectionId": "13d5ad44-9e99-428f-81e9-274458cefddc", // Common collection ID
        "resourceId": "bb2118f3-5e55-4510-b420-33ef9e1726d2", // New Resource ID and version number
        "resourceName": "PassportSchema", // Resource name must remain the same
        "resourceType": "JSONSchema2020", // Resource type must remain the same
        "resourceVersion" "1.0.1" // user-set semantic version control
        "mediaType": "application/json",
        "created": "2022-08-07T08:40:00Z",
        "checksum": "9123dcbb0b42652b0e105956c68d3ca2ff34584f324fa41a29aedd32b883e131", // New version checksum
        "previousVersionId": "44547089-170b-4f5a-bcbc-06e46e0089e4", // Points to previous version above
        "nextVersionId": "0be87654-4a48-4f8e-8789-15ec3589ccdd" // Points to next version. Empty string if no new version
        }
      ]
    }
```

Importantly, we decided not to populate the actual resource data into the didDocumentMetadata, but instead, what we refer to as a _Resource Preview_ which contains all the metadata about the associated resources.

6.2 Composition of Resource Preview {#preview}
=====================

Resource previews will aopear within DIDDocMetadata. These do not include the actual core data of the resource and only reference the metadata:

* Resource Collection ID: (did:example:...:) (supplied client-side)\*\*
* Resource ID: UUID ➝ specific to resource, also effectively a version number (supplied client-side)
* Resource Name: String (e.g., `JSONSchema2020` (supplied client-side))
* Resource Type (supplied client-side)
* Resource Version (supplied client-side)
* MediaType: (e.g. `application/json`/`image`/`application/octet-stream`/`text/plain`) (computed ledger-side)
* Created: XMLDatetime (computed ledger-side)
* Checksum: SHA-256 (computed ledger-side)
* previousVersionId: empty string if first, otherwise ID as long as Name, ResourceType, and MimeType match previous version (computed ledger-side)
* nextVersionId: empty string if first/latest, otherwise ID as long as Name, ResourceType, and MimeType match previous version (computed ledger-side)
* Also known as: a list of alternative URIs that can be used to get the resource.

Example:

```json
{
  "resourceUri": "did:example:13d5ad44-9e99-428f-81e9-274458cefddc/resources/bb2118f3-5e55-4510-b420-33ef9e1726d2",
  "resourceCollectionId": "13d5ad44-9e99-428f-81e9-274458cefddc",
  "resourceId": "bb2118f3-5e55-4510-b420-33ef9e1726d2",
  "resourceName": "PassportSchema",
  "resourceType": "CL-SChema",
  "resourceVersion": "1.0.1",
  "mediaType": "application/json",
  "created": "2022-04-20T20:19:19Z",
  "checksum": "a7c369ee9da8b25a2d6e93973fa8ca939b75abb6c39799d879a929ebea1adc0a",
  "previousVersionId": "67f2df00-0b6e-404b-8c70-1d63200e6412",
  "nextVersionId": "98922424-c214-4439-b52c-f68ddb450b40",
  "alsoKnownAs": [{
      "uri": "https://example.com/alternative-uri",
      "description": "Alternative URI description"
      },
      {
      "uri": "https://example.com/alternative-uri",
      "description": "Alternative URI description"
      }]
}
```
